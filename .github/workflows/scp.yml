name: CI for SCP Upload
env:
  TZ: Asia/Shanghai

on:
  push:
    tags:
      - "*"
    branches:
      - main
      - test
    paths-ignore:
      - ".github/workflows/*"
      - "!.github/workflows/subconverter.yml"
  pull_request:
    branches:
      - main
    paths-ignore:
      - ".github/workflows/*"
      - "!.github/workflows/subconverter.yml"
  schedule:
    - cron: "0 8 * * *"
  watch:
    types: [started]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: install dependencies
        run: |
          sudo apt install -y jq curl tar gzip openssl unzip

      - name: prepare
        run: |
          SUBSCRIBE_FILE=subscribe
          if test "x${{ secrets.subscribe }}" != "x"
          then
              echo "${{ secrets.subscribe }}" > $SUBSCRIBE_FILE
          fi

          echo 发布到指定地址，
          echo deploy='true' >> $GITHUB_ENV

          if test ! -r $SUBSCRIBE_FILE
          then
              echo 上传到artifact,
              echo artifact='true' >> $GITHUB_ENV
          fi
          if test ! -r $SUBSCRIBE_FILE
          then
              echo 没有节点，生成一个示例，
              echo 'tg://http?server=1.2.3.4&port=233&user=user&pass=pass&remarks=Example' > $SUBSCRIBE_FILE
          fi

      - name: run subconverter
        run: |
          echo 下载subconverter,
          code=$(curl -s -L -o release -w '%{http_code}' -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" 'https://api.github.com/repos/lonelam/subconverter-rs/releases/latest')
          if [[ "$code" != 200 ]]
          then
              echo api请求异常，
              cat release
              exit 3
          fi
          DOWNLOAD_URL=$(cat release | jq -r '.assets[] | select(.name | startswith("subconverter-linux-amd64") and endswith(".tar.gz")) | .browser_download_url')
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "ERROR: Could not find linux-amd64 download URL in release assets."
            cat release
            exit 4
          fi
          echo "Downloading from $DOWNLOAD_URL"
          curl -s -L -O "$DOWNLOAD_URL"
          FILENAME=$(basename "$DOWNLOAD_URL")
          echo "Extracting $FILENAME"
          tar -zxf "$FILENAME"
          cd subconverter
          echo 更改base_path以便支持缓存base配置文件，
          mv pref.example.ini pref.ini
          mv pref.example.toml pref.toml
          mv pref.example.yml pref.yml
          sed -i 's/^base_path=.*/base_path=_SubConfig/' pref.ini
          sed -i 's/^base_path = ".*"/base_path = "_SubConfig"/' pref.toml
          sed -i 's/base_path: .*/base_path: _SubConfig/' pref.yml
          echo 运行subconverter
          ./subconverter > subconverter.log 2>&1 &
          echo 等待subconverter启动...
          sleep 5 # Wait 5 seconds for subconverter to start

      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: subconverter/_SubConfig

      - name: cache external config
        run: |
          branch=${GITHUB_REF#refs/heads/}
          echo 下载ACL4SSR，用的比较多的一个规则仓库，
          curl -s -L -o "ACL4SSR.zip" "https://github.com/ACL4SSR/ACL4SSR/archive/refs/heads/master.zip"
          unzip -q ACL4SSR.zip
          mv "ACL4SSR-master" subconverter/_ACL4SSR
          echo 替换配置文件, 包含以上仓库的地址，改成本地地址以加速，
          function replace_url() {
              from=$1
              to=$2
              from=$(echo $from|sed 's/\//\\\//g')
              sed -i "s/$from/$to/g" subconverter/_SubConfig/*.*
          }
          replace_url "https://github.com/$GITHUB_REPOSITORY/raw/$branch" _SubConfig
          replace_url "https://github.com/ACL4SSR/ACL4SSR/raw/master" _ACL4SSR

      - name: update config
        run: |
          SUBSCRIBE_FILE=subscribe
          default_config="_SubConfig/subconverter.ini"
          params="emoji=true&list=false&fdn=false&sort=false&new_name=true"
          mkdir -p subconverter/sub
      
          echo "Creating subscribe.json with extra URL"
          cat $SUBSCRIBE_FILE | jq -srR 'split("\n") | map(select(length > 0))' > subscribe.json
      
          echo "Downloading node lists"
          cat subscribe.json | jq -r '
            map(select(startswith("http") and (startswith("https://t.me/") | not)))
            | to_entries[]
            | "echo fetching: " + (.key | tostring) + " && " + "curl -s -L --fail -o subconverter/sub/" + (.key | tostring) + " " + (.value | @sh)
          ' | sh -e
      
          if [ $? != 0 ]; then
            echo "Subscription download failed"
            exit 2
          fi
      
          echo "Converting subscriptions to local requests, keeping other links"
          url=$(cat subscribe.json | jq -r '
            to_entries
            | map(if (.value | (startswith("http") and (startswith("https://t.me/") | not))) then "sub/" + (.key | tostring) else .value end)
            | join("|")
            | @uri
          ')
      
          echo "Constructing configuration requests"
          mkdir -p config
          for suffix in "" "-work"; do
            for target in "clash" "quan" "v2ray" "ssr" "surfboard" "singbox"; do
              config=$(echo ${default_config/%.ini/${suffix}.ini} | jq -rR @uri)
              request_url="http://127.0.0.1:25500/sub?target=$target&url=$url&config=$config&$params"
              output_file="config/$target$suffix"
              echo "Requesting $request_url"
              code=$(curl -s -L -o "$output_file" -w '%{http_code}' "$request_url" || true)
              curl_exit_code=$?
              echo "Curl exited with code: $curl_exit_code, HTTP code received: $code"

              if [[ "$code" != 200 || $curl_exit_code -ne 0 ]]; then
                echo "Subscription conversion failed for target $target$suffix"
                echo "Curl exit code: $curl_exit_code, HTTP code: $code"
                echo "URL: $request_url"
                echo "--- Subconverter Log ---"
                if [ -f subconverter/subconverter.log ]; then
                    cat subconverter/subconverter.log
                else
                    echo "Subconverter log file not found."
                fi
                echo "--- Curl Output (if any) ---"
                if [ -f "$output_file" ]; then
                    cat "$output_file"
                else
                    echo "Curl output file not found."
                fi
                exit 1
              fi
            done
          done
        

      - name: compress config
        run: |
          KEY_FILE=upload_secret
          echo 打包压缩所有生成的配置文件，
          cd config
          tar -zcf ../config.tar.gz *
          cd ..
      - name: Copy SSH keys
        run: |
          mkdir ~/.ssh
          echo "${{ secrets.SCP_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      - name: deploy config
        if: ${{ env.deploy == 'true' }}
        run: |
          echo 发布配置文件压缩包，
          scp -o StrictHostKeyChecking=no -P ${{ secrets.PORT }} -r ./config.tar.gz www@${{ secrets.HOST }}:/www/private/
          echo 上传完成，执行解压
          ssh -o StrictHostKeyChecking=no -p ${{ secrets.PORT }}  www@${{ secrets.HOST }} "tar -zxf /www/private/config.tar.gz -C /www/private/"

      - name: upload config
        if: ${{ env.artifact == 'true' }}
        uses: actions/upload-artifact@master
        with:
          name: config
          path: config.tar.gz
